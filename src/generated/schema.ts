/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/public/api/auth": {
    get: operations["AuthController_preLogin"];
    post: operations["AuthController_login"];
    put: operations["AuthController_refreshLogin"];
  };
  "/public/api/auth/{refreshToken}": {
    delete: operations["AuthController_logout"];
  };
  "/public/api/member/{memberId}/account/bank": {
    get: operations["BankController_searchBankItems"];
    patch: operations["BankController_saveBanksExceptedMatch"];
  };
  "/public/api/member/{memberId}/account/bank/all": {
    get: operations["BankController_searchBankItemsAll"];
  };
  "/public/api/member/{memberId}/account/bank/balance": {
    get: operations["BankController_getBankBalances"];
  };
  "/public/api/member/{memberId}/account/bank/summary": {
    get: operations["BankController_searchBankSummaries"];
  };
  "/public/api/member/{memberId}/account/{accountId}/bank/{bankId}": {
    delete: operations["BankController_deleteBankItem"];
    patch: operations["BankController_saveBankMemo"];
  };
  "/public/api/member/{memberId}/account": {
    get: operations["AccountController_searchAccounts"];
    post: operations["AccountController_registerAccount"];
    patch: operations["AccountController_updateAccounts"];
  };
  "/public/api/member/{memberId}/account/{accountId}": {
    get: operations["AccountController_getAccount"];
    delete: operations["AccountController_deleteAccount"];
    patch: operations["AccountController_updateAccount"];
  };
  "/public/api/member/{memberId}/match/summary": {
    get: operations["MatchController_getOrderMatchSummary"];
  };
  "/public/api/member/{memberId}/match/{matchId}": {
    get: operations["MatchController_getOrderMatch"];
  };
  "/public/api/member/{memberId}/match": {
    post: operations["MatchController_registerOrderMatch"];
  };
  "/public/api/member/{memberId}": {
    get: operations["MemberController_getMember"];
    patch: operations["MemberController_updateMember"];
  };
  "/public/api/member": {
    post: operations["MemberController_join"];
    get: operations["MemberController_searchMembers"];
  };
  "/public/api/member/{memberId}/type": {
    post: operations["MemberController_changeMemberType"];
  };
  "/public/api/notice": {
    get: operations["NoticeController_getNotices"];
  };
  "/public/api/notice/{noticeId}": {
    get: operations["NoticeController_getNotice"];
  };
  "/public/api/member/{memberId}/order": {
    get: operations["OrderController_searchOrders"];
    patch: operations["OrderController_updateShopOrders"];
  };
  "/public/api/member/{memberId}/order/request": {
    post: operations["OrderController_requestOrder"];
  };
  "/public/api/member/{memberId}/order/request/{requestId}": {
    get: operations["OrderController_confirmRequestOrder"];
  };
  "/public/api/qna": {
    get: operations["QnaController_getQnas"];
    post: operations["QnaController_registerQna"];
  };
  "/public/api/sticky/qna": {
    get: operations["QnaController_getStickyQnas"];
  };
  "/public/api/qna/{qnaId}": {
    get: operations["QnaController_getQna"];
  };
  "/public/api/member/{memberId}/service": {
    get: operations["ServiceItemController_getService"];
    post: operations["ServiceItemController_registerService"];
  };
  "/public/api/member/{memberId}/service/shop/{shopNo}": {
    delete: operations["ServiceItemController_deleteMultimallMatchingService"];
  };
  "/public/api/member/{memberId}/service/unidentified": {
    delete: operations["ServiceItemController_deleteUnidentifiedService"];
  };
  "/public/api/member/{memberId}/setting/except": {
    get: operations["SettingController_getMatchExceptUser"];
    post: operations["SettingController_registerExceptUser"];
  };
  "/public/api/member/{memberId}/setting/except/{exceptId}": {
    delete: operations["SettingController_deleteMatchExceptUser"];
  };
  "/public/api/member/{memberId}/setting/log": {
    get: operations["SettingController_getSettingLogs"];
  };
  "/public/api/configinfo/account/{accountCode}": {
    get: operations["ConfigInfoController_getAccount"];
  };
  "/public/api/package/usage": {
    get: operations["PackageUsageController_search"];
  };
  "/public/api/member/{memberId}/unidentified/setting": {
    get: operations["UnidentifiedInputController_getUnidentifiedInputConfig"];
    patch: operations["UnidentifiedInputController_updateUnidentifiedInputConfig"];
  };
  "/public/api/member/{memberId}/unidentified/report": {
    get: operations["UnidentifiedInputController_searchUnidentifiedInputReports"];
  };
  "/public/api/member/{memberId}/unidentified/report/{reportId}": {
    get: operations["UnidentifiedInputController_getUnidentifiedInputReport"];
  };
}

export interface operations {
  /**
   * 카페24 앱스토어에서 전달된 값을 받고 stateId를 생성 및 저장한 후 302코드로 카페24사이트로 리다이렉트 수행
   */
  AuthController_preLogin: {
    parameters: {
      query: {
        /**
         * mall Id
         */
        mall_id: string;
        /**
         * user Id
         */
        user_id: string;
        /**
         * 이용자 이름
         */
        user_name: string;
        /**
         * 이용자 유형(P, A)
         */
        user_type: "P" | "A";
        /**
         * 멀티샵 여부(T, F)
         */
        is_multi_shop?: string;
        /**
         * 사용언어
         */
        lang?: string;
        /**
         * 국가코드
         */
        nation?: string;
        /**
         * 상점 번호
         */
        shop_no: string;
        /**
         * 타임스탬프
         */
        timestamp: string;
        /**
         * hmac
         */
        hmac: string;
        /**
         * 서비스 유형(cafe24, cafe24pkg)
         */
        service_type: "cafe24" | "cafe24pkg";
      };
    };
    responses: {
      /**
       * cafe24 api로 redirect
       */
      "200": unknown;
    };
  };
  /**
   * 카페24앱을 통해 접속해서 받은정보로 로그인을 한다
   */
  AuthController_login: {
    parameters: {};
    requestBody: {
      "application/json": components["schemas"]["FilterAuthRedirect"];
    };
    responses: {
      /**
       * 인증성공
       */
      "200": {
        "application/json": components["schemas"]["LoginResponse"];
      };
      /**
       * 인증실패 : state 값이 올바르지 않은 경우
       */
      "401": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 뱅크다M패키지 고객 기간 만료
       */
      "406": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 토큰 유효기간이 얼마남지 않거나 서비스 변경이 있는경우에 토큰을 갱신한다.
   */
  AuthController_refreshLogin: {
    parameters: {};
    requestBody: {
      "application/json": components["schemas"]["RefreshLoginRequest"];
    };
    responses: {
      /**
       * 성공 : 갱신한 토큰을 반환
       */
      "200": unknown;
      /**
       * 인증실패 : 리프레시토큰이 존재하지 않는 경우
       */
      "401": unknown;
      /**
       * 인증실패 : 뱅크다M패키지 고객 기간 만료
       */
      "403": unknown;
    };
  };
  /**
   * (로그아웃시) 토큰을 제거한다
   */
  AuthController_logout: {
    parameters: {
      path: {
        /**
         * 리프레시토큰
         */
        refreshToken: string;
      };
    };
    responses: {
      /**
       * 로그아웃 성공
       */
      "200": unknown;
      /**
       * 실패 : 리프레시토큰이 존재하지 않는 경우
       */
      "404": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 이미 삭제된 리프레시토큰인 경우
       */
      "409": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 회원이 보유한 계좌의 거래내역 목록을 검색한다
   */
  BankController_searchBankItems: {
    parameters: {
      path: {
        memberId: number;
      };
      query: {
        /**
         * 검색시작일자(YYMMDD)
         */
        startDate: number;
        /**
         * 검색종료일자(YYMMDD)
         */
        endDate: number;
        /**
         * 검색구분(JUKYO:적요, PAYMENT:입금액,출금액, MEMO:메모)
         */
        searchType?: "JUKYO" | "PAYMENT" | "MEMO";
        /**
         * 입출금선택(INPUT:입금내역, OUTPUT:출금내역)
         */
        inOutType?: "INPUT" | "OUTPUT";
        /**
         * 매치제외 여부(T:제외,F:대상)
         */
        exceptType?: "F" | "T";
        /**
         * 자동입금확인 상태 포함여부(T:포함)
         */
        matchAuto?: "T";
        /**
         * 수동입금확인 상태 포함여부(T:포함)
         */
        matchManual?: "T";
        /**
         * 유사매치 상태 포함여부(T:포함)
         */
        matchSimmillar?: "T";
        /**
         * 미확인 상태 포함여부(T:포함)
         */
        matchUnidentified?: "T";
        /**
         * 특정계좌 목록
         */
        accountIds?: number[];
        /**
         * 검색키워드
         */
        keyword?: string;
        /**
         * 페이징 페이지 정보
         */
        page: number;
        /**
         * 페이징 페이지당 목록 수
         */
        limit: number;
        /**
         * 페이징 링크 경로
         */
        route?: string;
      };
    };
    responses: {
      /**
       * 성공 : 회원이 보유한 계좌의 거래내역 목록을 반환
       */
      "200": {
        "application/json": components["schemas"]["BankPaging"];
      };
      /**
       * 1. 검색어 입력시 검색구분 옵션은 필수
       * 2. 검색구분이 금액인 경우, 숫자만 입력 가능
       * 3. 매치포함옵션은 입금내역에서만 가능
       * 4. 매치상태별 조회는 입금내역에서만 가능
       */
      "400": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * (다수의) 거래내역 목록의 매치대상제외 여부를 수정한다
   */
  BankController_saveBanksExceptedMatch: {
    parameters: {
      path: {
        /**
         * 회원의 순번
         */
        memberId: number;
      };
    };
    requestBody: {
      "application/json": components["schemas"]["UpdateBankMatchInput"];
    };
    responses: {
      /**
       * 성공 : 수정된 계좌내역 목록을 반환
       */
      "200": {
        "application/json": components["schemas"]["SaveBanksExceptedMatchResponse"];
      };
      /**
       * 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간)
       */
      "403": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 회원 혹은 계좌번호 혹은 계좌의 거래내역을 찾을 수 없음
       */
      "404": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 요청한 거래내역목록과 업데이트할 거래내역목록이 일치하지 않는경우
       */
      "406": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 회원이 보유한 계좌의 거래내역 목록을 검색한다
   */
  BankController_searchBankItemsAll: {
    parameters: {
      path: {
        memberId: number;
      };
      query: {
        /**
         * 검색시작일자(YYMMDD)
         */
        startDate: number;
        /**
         * 검색종료일자(YYMMDD)
         */
        endDate: number;
        /**
         * 검색구분(JUKYO:적요, PAYMENT:입금액,출금액, MEMO:메모)
         */
        searchType?: "JUKYO" | "PAYMENT" | "MEMO";
        /**
         * 입출금선택(INPUT:입금내역, OUTPUT:출금내역)
         */
        inOutType?: "INPUT" | "OUTPUT";
        /**
         * 매치제외 여부(T:제외,F:대상)
         */
        exceptType?: "F" | "T";
        /**
         * 자동입금확인 상태 포함여부(T:포함)
         */
        matchAuto?: "T";
        /**
         * 수동입금확인 상태 포함여부(T:포함)
         */
        matchManual?: "T";
        /**
         * 유사매치 상태 포함여부(T:포함)
         */
        matchSimmillar?: "T";
        /**
         * 미확인 상태 포함여부(T:포함)
         */
        matchUnidentified?: "T";
        /**
         * 특정계좌 목록
         */
        accountIds?: number[];
        /**
         * 검색키워드
         */
        keyword?: string;
      };
    };
    responses: {
      /**
       * 성공 : 회원이 보유한 계좌의 거래내역 목록을 반환
       */
      "200": {
        "application/json": components["schemas"]["Bank"][];
      };
    };
  };
  /**
   * (전체, 계좌별) 잔액 목록을 검색한다
   */
  BankController_getBankBalances: {
    parameters: {
      path: {
        /**
         * 회원의 순번
         */
        memberId: number;
      };
    };
    responses: {
      /**
       * 성공 : 잔액목록을 반환
       */
      "200": {
        "application/json": components["schemas"]["BankBalanceView"][];
      };
      /**
       * 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간)
       */
      "403": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 회원 혹은 거래내역을 찾을 수 없습니다
       */
      "404": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 회원의 (전체, 계좌별, 입금, 출금) 거래금액목록을 검색한다
   */
  BankController_searchBankSummaries: {
    parameters: {
      path: {
        /**
         * 회원의 순번
         */
        memberId: number;
      };
      query: {
        /**
         * (계좌거래내역의) 검색시작일자(YYYYMMDD)
         */
        startDate?: string;
        /**
         * (계좌거래내역의) 검색종료일자(YYYYMMDD)
         */
        endDate?: string;
        /**
         * 금액,적요,메모 중 택1
         */
        searchType?: "JUKYO" | "PAYMENT" | "MEMO";
        /**
         * 검색 내용
         */
        keyword?: string;
        /**
         * 선택한 계좌들의 순번 목록
         */
        accountIds?: number[];
        /**
         * (없는경우 전체) 입금,출금 중 택1
         */
        paymentOption?: "INPUT" | "OUTPUT";
      };
    };
    responses: {
      /**
       * 성공 : 잔액을 반환
       */
      "200": {
        "application/json": components["schemas"]["SearchBankSummariesResponse"][];
      };
      /**
       * 검색조건의 날짜범위가 올바르지 않습니다
       */
      "400": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간)
       */
      "403": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 회원 혹은 등록된 계좌정보를 찾을 수 없음
       */
      "404": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 거래내역을 삭제한다
   */
  BankController_deleteBankItem: {
    parameters: {
      path: {
        /**
         * 회원의 순번
         */
        memberId: number;
        /**
         * 계좌의 순번
         */
        accountId: number;
        /**
         * 거래내역의 순번
         */
        bankId: number;
      };
    };
    responses: {
      /**
       * 성공 : 거래내역삭제
       */
      "200": unknown;
      /**
       * 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간)
       */
      "403": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 회원 혹은 거래내역을 찾을 수 없음
       */
      "404": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * (특정) 거래내역의 메모를 저장한다
   */
  BankController_saveBankMemo: {
    parameters: {
      path: {
        /**
         * 회원의 순번
         */
        memberId: number;
        /**
         * 계좌의 순번
         */
        accountId: number;
        /**
         * 거래내역의 순번
         */
        bankId: number;
      };
    };
    requestBody: {
      "application/json": components["schemas"]["UpdateBankInput"];
    };
    responses: {
      /**
       * 성공 : 수정된 계좌내역을 반환
       */
      "200": {
        "application/json": components["schemas"]["SaveBankMemoResponse"];
      };
      /**
       * 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간)
       */
      "403": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 회원 혹은 계좌번호 혹은 은행코드를 찾을 수 없음
       */
      "404": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 회원이 보유한 계좌정보 목록을 검색한다
   */
  AccountController_searchAccounts: {
    parameters: {
      path: {
        /**
         * 회원의 순번
         */
        memberId: number;
      };
      query: {
        /**
         * 계좌상태(M:즉시조회, T:정상, F:정지, H:만료)
         */
        tag?: ("M" | "T" | "F" | "H")[];
      };
    };
    responses: {
      /**
       * 성공 : 회원이 보유한 계좌정보 목록을 반환
       */
      "200": {
        "application/json": components["schemas"]["AccountListResponse"][];
      };
      /**
       * 실패 : 요청 파라미터 오류
       */
      "400": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 인증 오류
       */
      "401": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 회원 혹은 계좌번호를 찾을 수 없음
       */
      "404": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 새로운 계좌를 등록한다
   */
  AccountController_registerAccount: {
    parameters: {
      path: {
        /**
         * 회원의 순번
         */
        memberId: number;
      };
    };
    requestBody: {
      "application/json": components["schemas"]["RegisterAccountInput"];
    };
    responses: {
      /**
       * 성공 : 추가된 계좌정보를 반환
       */
      "200": {
        "application/json": components["schemas"]["AccountResponse"];
      };
      /**
       * 1. 실패 : 계좌비밀번호는 (숫자로된 문자열) 4자리를 입력해야함.
       * 2. 실패 : 주민번호 혹은 사업자번호 생략함.
       * 3. 실패 : (개인의 경우 주민번호를, 법인의 경우 사업자번호를) 주민등록번호 앞자리 혹은 사업자번호의 형식이 잘못됨.
       * 4. 실패 : 올바른 유형의 사업자번호가 아님.
       * 5. 실패 : (국민은행(04),신한은행(26),대구은행(31),신협은행(48),케이뱅크(91)에 해당하는경우) '안전계좌번호' 또는 '간편조회' 또는 '인터넷뱅킹' 아이디를 입력하지 않음 / (그외의 은행인경우) 아이디를 입력한경우.
       * 6. 실패 : (신한은행(26),대구은행(31),신협은행(48),케이뱅크(91)에 해당하는경우) '안전계좌번호' 또는 '간편조회' 또는 '인터넷뱅킹' 패스워드를 입력하지 않음 / (그외의 은행인경우) 패스워드를 입력한 경우.
       * 7. 실패 : 씨티은행의 경우 개인 계좌조회가 불가능함.
       * 8. 실패 : 외환은행의 경우, 생성이 불가능함.
       */
      "400": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간)
       */
      "403": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 1. 실패 : 회원을 찾을 수 없음.
       * 2. 실패 : 현재 이용중인 상품(일반계좌, 퀵계좌)을 찾을 수 없음.
       */
      "404": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 1. 실패 : 등록 가능한 계좌의 수가 초과하거나 계좌이용기간이 만료시.
       */
      "406": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 1. 실패 : 중복된 계좌번호가 존재.
       */
      "409": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * (2개의) 계좌의 정렬 순번을 교체함
   */
  AccountController_updateAccounts: {
    parameters: {
      path: {
        /**
         * 회원의 순번
         */
        memberId: number;
      };
    };
    requestBody: {
      "application/json": components["schemas"]["UpdateAccountsInput"];
    };
    responses: {
      /**
       * 성공 : 수정된 계좌정보 목록을 반환
       */
      "200": {
        "application/json": components["schemas"]["UpdateAccountsResponse"][];
      };
      /**
       * 1. 실패 : 올바른 계좌정렬의 순번을 입력해야함.
       * 2. 실패 : 교체할 계좌의 순번+정렬순번 목록을 2개를 입력하지 않음.
       */
      "400": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간)
       */
      "403": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 회원 혹은 계좌를 찾을 수 없음
       */
      "404": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 회원의 특정 계좌내용을 조회한다
   */
  AccountController_getAccount: {
    parameters: {
      path: {
        /**
         * 회원의 순번
         */
        memberId: number;
        /**
         * 계좌의 순번
         */
        accountId: number;
      };
    };
    responses: {
      /**
       * 성공 : 조회된 계좌번호를 반환
       */
      "200": {
        "application/json": components["schemas"]["AccountResponse"];
      };
      /**
       * 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간)
       */
      "403": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 회원 혹은 계좌번호를 찾을 수 없음
       */
      "404": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 해당회원의 계좌를 삭제한다
   */
  AccountController_deleteAccount: {
    parameters: {
      path: {
        /**
         * 회원의 순번
         */
        memberId: number;
        /**
         * 계좌의 순번
         */
        accountId: number;
      };
    };
    responses: {
      /**
       * 성공 : 계좌정보를 삭제
       */
      "200": unknown;
      /**
       * 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간)
       */
      "403": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 회원 혹은 계좌정보를 찾을 수 없음
       */
      "404": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 특정 계좌의 정보 혹은 색상만을 수정한다.
   */
  AccountController_updateAccount: {
    parameters: {
      path: {
        /**
         * 업데이트할 계좌번호
         */
        accountId: number;
        /**
         * 회원의 순번
         */
        memberId: number;
      };
    };
    requestBody: {
      "application/json": components["schemas"]["UpdateAccountInput"];
    };
    responses: {
      /**
       * 성공 : 수정된 계좌정보를 반환
       */
      "200": {
        "application/json": components["schemas"]["UpdateAccountResponse"];
      };
      /**
       * [계좌색상의 경우]
       * 1. 실패 : #을 제외한 6자리가 아님.
       *
       * [계좌수정의 경우]
       * 1. 실패 : 올바른 유형의 사업자번호가 아님.
       * 2. 실패 : 계좌비밀번호는 (숫자로된 문자열) 4자리를 입력해야함.
       * 3. 실패 : 주민번호 혹은 사업자번호 생략함.
       * 4. 실패 : (개인:주민번호/법인:사업자번호) 주민등록번호 앞자리 혹은 사업자번호의 형식이 잘못됨.
       * 5. 실패 : (국민은행(04),신한은행(26),대구은행(31),신협은행(48),케이뱅크(91)에 해당하는경우) '안전계좌번호' 또는 '간편조회' 또는 '인터넷뱅킹' 아이디를 입력하지 않음 / (그외의 은행인경우) 아이디를 입력한경우.
       * 6. 실패 : (신한은행(26),대구은행(31),신협은행(48),케이뱅크(91)에 해당하는경우) '안전계좌번호' 또는 '간편조회' 또는 '인터넷뱅킹' 패스워드를 입력하지 않음 / (그외의 은행인경우) 패스워드를 입력한 경우.
       * 7. 실패 : 씨티은행의 경우 개인 계좌조회가 불가능함.
       */
      "400": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간)
       */
      "403": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 회원 혹은 계좌번호를 찾을 수 없음
       */
      "404": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 입금확인 상태별 통계를 조회한다
   */
  MatchController_getOrderMatchSummary: {
    parameters: {
      path: {
        /**
         * 회원의 순번
         */
        memberId: number;
      };
      query: {
        /**
         * 검색시작일자(YYMMDD)
         */
        startDate: number;
        /**
         * 검색종료일자(YYMMDD)
         */
        endDate: number;
        /**
         * 검색구분(JUKYO:적요, PAYMENT:입금액,출금액, MEMO:메모)
         */
        searchType?: "JUKYO" | "PAYMENT" | "MEMO";
        /**
         * 입출금선택(INPUT:입금내역, OUTPUT:출금내역)
         */
        inOutType?: "INPUT" | "OUTPUT";
        /**
         * 매치제외 여부(T:제외,F:대상)
         */
        exceptType?: "F" | "T";
        /**
         * 자동입금확인 상태 포함여부(T:포함)
         */
        matchAuto?: "T";
        /**
         * 수동입금확인 상태 포함여부(T:포함)
         */
        matchManual?: "T";
        /**
         * 유사매치 상태 포함여부(T:포함)
         */
        matchSimmillar?: "T";
        /**
         * 미확인 상태 포함여부(T:포함)
         */
        matchUnidentified?: "T";
        /**
         * 특정계좌 목록
         */
        accountIds?: number[];
        /**
         * 검색키워드
         */
        keyword?: string;
      };
    };
    responses: {
      /**
       * 성공 : 입금확인 상태별 통계를 반환
       */
      "200": {
        "application/json": components["schemas"]["GetOrderMatchSummaryResponse"];
      };
      /**
       * 실패 : 잘못된 검색옵션
       */
      "400": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간)
       */
      "403": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 회원을 찾을 수 없음
       */
      "404": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 특정 회원의 입금확인 상세정보를 조회한다
   */
  MatchController_getOrderMatch: {
    parameters: {
      path: {
        /**
         * 회원의 순번
         */
        memberId: number;
        /**
         * 매칭순번
         */
        matchId: number;
      };
    };
    responses: {
      /**
       * 성공 : 회원의 입금확인 상정보를 반환
       */
      "200": {
        "application/json": components["schemas"]["GetOrderMatchResponse"];
      };
      /**
       * 실패 : 미확인상태의 입금내역은 조회할 수 없음
       */
      "400": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간)
       */
      "403": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 회원 혹은 매칭되는 입금내역 정보를 찾을 수 없음
       */
      "404": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 수동입금확인을 등록한다
   */
  MatchController_registerOrderMatch: {
    parameters: {
      path: {
        /**
         * 회원의 순번
         */
        memberId: number;
      };
    };
    requestBody: {
      "application/json": components["schemas"]["RegisterOrderMatchInput"];
    };
    responses: {
      /**
       * 성공 : 등록된 입금정보를 반환
       */
      "200": {
        "application/json": components["schemas"]["MatchManual"];
      };
      /**
       * 1. 실패 : 입력목록 중 거래내역순번과 주문순번 2가지가 한꺼번에 입력됨.
       * 2. 실패 : 거래내역순번 혹은 주문내역순번이 하나라도 입력되지 않은경우.
       * 3. 실패 : 매치순번 0을 입력함.
       */
      "400": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간)
       */
      "403": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 회원 혹은 거래내역 혹은 주문내역을 찾을 수 없음
       */
      "404": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 주문내역목록 중 2개 이상의 멀티몰이 존재함.
       */
      "406": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 특정 회원의 정보를 조회한다
   */
  MemberController_getMember: {
    parameters: {
      path: {
        /**
         * 회원의 순번
         */
        memberId: number;
      };
    };
    responses: {
      /**
       * 회원정보를 반환
       */
      "200": unknown;
      /**
       * 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간)
       */
      "403": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 회원을 찾을 수 없음
       */
      "404": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 회원정보를 수정한다
   */
  MemberController_updateMember: {
    parameters: {
      path: {
        /**
         * 회원의 순번
         */
        memberId: number;
      };
    };
    requestBody: {
      "application/json": components["schemas"]["UpdateMemberInput"];
    };
    responses: {
      /**
       * 성공 : 회원의 계좌정보를 반환
       */
      "200": unknown;
      /**
       * 1. 실패 : 잘못된 자동입금확인 기간(15,30만 입력)
       * 2. 실패 : 잘못된 표기여부(y:활성화,n:비활성화)
       */
      "400": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간)
       */
      "403": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 회원을 찾을 수 없음
       */
      "404": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 신규이용자의 기본정보를 전달받아 회원정보 테이블에 등록
   */
  MemberController_join: {
    parameters: {};
    requestBody: {
      "application/json": components["schemas"]["userJoinRequest"];
    };
    responses: {
      /**
       * 회원가입성공
       */
      "200": {
        "application/json": components["schemas"]["userJoinResponse"];
      };
      /**
       * 인증실패 : state 값이 올바르지 않은 경우
       */
      "401": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 회원가입실패 : 이미 등록된 이용자ID인 경우
       */
      "409": {
        "application/json": components["schemas"]["ConflictException"];
      };
    };
  };
  /**
   * (관리자가) 회원목록을 검색한다
   */
  MemberController_searchMembers: {
    parameters: {};
    responses: {
      /**
       * 성공 : 회원목록을 반환
       */
      "200": unknown;
      /**
       * 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간, 관리자 여부)
       */
      "409": unknown;
    };
  };
  /**
   * 회원의 이용서비스를 변경(cafe24 -> cafe24pkg,  cafe24pkg -> cafe24)한다.
   */
  MemberController_changeMemberType: {
    parameters: {
      path: {
        /**
         * 회원의 순번
         */
        memberId: number;
      };
    };
    requestBody: {
      "application/json": components["schemas"]["chageMemberType"];
    };
    responses: {
      /**
       * 성공 : 변경된 서비스정보를 반환
       */
      "200": {
        "application/json": components["schemas"]["chageMemberTypeRespone"];
      };
      /**
       * 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간, 관리자 여부)
       */
      "409": unknown;
    };
  };
  /**
   * 공지사항 목록을 검색한다
   */
  NoticeController_getNotices: {
    parameters: {
      query: {
        /**
         * 페이징 페이지 정보
         */
        page: number;
        /**
         * 페이징 페이지당 목록 수
         */
        limit: number;
        /**
         * 페이징 링크 경로
         */
        route?: string;
      };
    };
    responses: {
      /**
       * 성공 : 공지사항 목록을 반환
       */
      "200": {
        "application/json": components["schemas"]["GetNotices"];
      };
      /**
       * 실패 : 잘못된 검색옵션의 입력
       */
      "400": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간)
       */
      "403": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 공지사항을 조회한다
   */
  NoticeController_getNotice: {
    parameters: {
      path: {
        /**
         * 공지사항의 순번
         */
        noticeId: number;
      };
    };
    responses: {
      /**
       * 성공 : 공지사항을 반환
       */
      "200": {
        "application/json": components["schemas"]["Notice"];
      };
      /**
       * 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간)
       */
      "403": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 공지사항을 찾을 수 없음
       */
      "404": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 회원의 주문내역 목록을 검색한다
   */
  OrderController_searchOrders: {
    parameters: {
      path: {
        memberId: number;
      };
      query: {
        /**
         * 검색시작일자(YYMMDD)
         */
        startDate: number;
        /**
         * 검색종료일자(YYMMDD)
         */
        endDate: number;
        /**
         * 검색구분(N00:입금전, N10:상품준비중, N20:배송준비중, N21:배송대기, N30: 배송중, N40:배송완료)
         */
        orderStatus: "N00" | "N10" | "N20" | "N21" | "N30" | "N40";
        /**
         * 검색구분(BILLINGNAME:입금자명, BUYERNAME:주문자명, ORDERNO:주문번호, PAYMENT:주문액, BANKCODENAME: 입금은행)
         */
        searchType?:
          | "BILLINGNAME"
          | "BUYERNAME"
          | "ORDERNO"
          | "PAYMENT"
          | "BANKCODENAME";
        /**
         * 검색키워드
         */
        keyword?: string;
        /**
         * 페이징 페이지 정보
         */
        page: number;
        /**
         * 페이징 페이지당 목록 수
         */
        limit: number;
        /**
         * 페이징 링크 경로
         */
        route?: string;
      };
    };
    responses: {
      /**
       * 성공 : 회원의 주문내역 목록을 반환
       */
      "200": {
        "application/json": components["schemas"]["OrderPaging"];
      };
      /**
       * 실패 : 1. memberId 가 숫자가 아닌 경우
       * 2. 검색어가 있을 경우, 검색구분옵션은 필수
       * 3. 검색옵션이 주문금액일 경우, 검색어가 숫자가 아닐 경우
       */
      "400": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 인증 오류
       */
      "401": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 회원을 찾을 수 없음
       */
      "404": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 회원의 주문내역 목록을 수정한다
   */
  OrderController_updateShopOrders: {
    parameters: {
      path: {
        /**
         * 회원의 순번
         */
        memberId: number;
      };
    };
    requestBody: {
      "application/json": components["schemas"]["UpdateShopOrdersInput"];
    };
    responses: {
      /**
       * 성공 : 수정한 주문내역 목록을 반환한다
       */
      "200": unknown;
      /**
       * 실패 : 인증 오류
       */
      "401": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 회원을 찾을 수 없음
       */
      "404": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 1. 실패 : 다른 순번의 샵번호를 입력함.
       * 2. 실패 : 일치하지않는 번호목록이 존재함.
       */
      "406": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 주문정보 검색 이전에 카페24 주문정보를 가져오도록 요청한다
   */
  OrderController_requestOrder: {
    parameters: {
      path: {
        memberId: number;
      };
    };
    requestBody: {
      "application/json": components["schemas"]["RequestGetOrderInput"];
    };
    responses: {
      /**
       * 성공 : JobId 반환
       */
      "200": {
        "application/json": components["schemas"]["JobIdResponse"];
      };
      /**
       * 실패 : 1. memberId 가 숫자가 아닌 경우
       * 2. 검색날짜에 숫자가 들어오지 않은 경우
       * 3. 검색시작날짜가 검색종료날짜보다 큰 경우
       * 4. 검색 종료날짜가 현재날짜보다 큰 경우
       * 5. 검색 시작날짜는 3개월까지 검색 가능
       */
      "400": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 인증 오류
       */
      "401": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 주문정보 요청건에 대한 완료여부를 확인한다
   */
  OrderController_confirmRequestOrder: {
    parameters: {
      path: {
        memberId: number;
        requestId: number;
      };
    };
    responses: {
      /**
       * 성공 : 작업상태반환(success:성공, fail:실패, ready:준비중, running:진행중, cancel: 취소)
       */
      "200": {
        "application/json": components["schemas"]["ConfirmRequestResponse"];
      };
      /**
       * 실패 : 1. memberId 가 숫자가 아닌 경우
       * 2. requestId 가 숫자가 아닌 경우
       */
      "400": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 인증 오류
       */
      "401": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 요청건에 대한 권한 없음
       */
      "403": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 회원 또는 요청건을 찾을 수 없음
       */
      "404": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * Q&A 문의유형의 목록을 검색한다
   */
  QnaController_getQnas: {
    parameters: {
      query: {
        /**
         * 페이징 페이지 정보
         */
        page: number;
        /**
         * 페이징 페이지당 목록 수
         */
        limit: number;
        /**
         * 페이징 링크 경로
         */
        route?: string;
      };
    };
    responses: {
      /**
       * 성공 : Q&A 문의 목록을 반환
       */
      "200": {
        "application/json": components["schemas"]["GetQnas"];
      };
      /**
       * 실패 : 잘못된 검색옵션을 입력
       */
      "400": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간)
       */
      "403": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * Q&A 문의유형의 글을 등록한다
   */
  QnaController_registerQna: {
    parameters: {};
    requestBody: {
      "application/json": components["schemas"]["RegisterQnaInput"];
    };
    responses: {
      /**
       * 성공 : 등록한 (문의유형) Q&A를 반환
       */
      "200": {
        "application/json": components["schemas"]["Qna"];
      };
      /**
       * 실패 : 잘못된 데이터 형식 (이메일 유효성)
       */
      "400": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간)
       */
      "403": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * Q&A 공지유형의 목록을 검색한다
   */
  QnaController_getStickyQnas: {
    parameters: {};
    responses: {
      /**
       * 성공 : Q&A 공지 목록을 반환
       */
      "200": {
        "application/json": components["schemas"]["GetQnas"];
      };
      /**
       * 실패 : 잘못된 검색옵션을 입력
       */
      "400": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간)
       */
      "403": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * Q&A를 조회한다
   */
  QnaController_getQna: {
    parameters: {
      path: {
        /**
         * Q&A의 순번
         */
        qnaId: number;
      };
    };
    responses: {
      /**
       * 성공 : Q&A를 반환
       */
      "200": {
        "application/json": components["schemas"]["Qna"];
      };
      /**
       * 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간)
       */
      "403": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : Q&A를 찾을 수 없음
       */
      "404": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 회원의 서비스 이용현황을 조회한다
   */
  ServiceItemController_getService: {
    parameters: {
      path: {
        /**
         * 회원의 순번
         */
        memberId: number;
      };
    };
    responses: {
      /**
       * 성공 : 회원의 서비스 이용현황 정보를 반환
       */
      "200": {
        "application/json": components["schemas"]["ServiceListResponse"];
      };
      /**
       * 실패 : 요청 파라미터 오류
       */
      "400": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 인증 오류
       */
      "401": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 회원을 찾을 수 없음
       */
      "404": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 회원의 서비스를 등록한다
   */
  ServiceItemController_registerService: {
    parameters: {
      path: {
        /**
         * 회원의 순번
         */
        memberId: number;
      };
    };
    requestBody: {
      "application/json": components["schemas"]["RegisterServiceInput"];
    };
    responses: {
      /**
       * 성공 : 등록한 회원의 서비스를 반환
       */
      "200": {
        "application/json": components["schemas"]["RegisterServiceInput"];
      };
      /**
       * 1. memberId가 number가 아닐 때
       * 2. serviceType이 multimall 인 경우 shopNo 필수
       * 3. serviceType = unidentified인 경우, 다른 파라미터 입력시 에러
       */
      "400": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 인증 오류
       */
      "401": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 1. 회원정보가 없는경우
       * 2. [멀티몰매칭]요청된 shopNo가 없는 경우
       */
      "404": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 1. 카페24 패키지 고객이 아닌경우
       * 2. 이미 사용중인 서비스의 경우
       * 3. [멀티몰매칭]비활성화된 shop인경우
       */
      "406": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 회원의 멀티몰매칭서비스를 해지한다
   */
  ServiceItemController_deleteMultimallMatchingService: {
    parameters: {
      path: {
        /**
         * 회원의 순번
         */
        memberId: number;
        /**
         * 멀티몰매칭서비스 해지할 shop 번호
         */
        shopNo: number;
      };
    };
    responses: {
      /**
       * 정상 : 상태 200 반환
       */
      "200": unknown;
      /**
       * 1. memberId가 number가 아닐 때
       * 2. shopNo가 number가 아닐 때
       */
      "400": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 인증 오류
       */
      "401": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 회원 또는 멀티몰을 찾을 수 없음
       */
      "404": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 카페24 패키지 고객이 아닐경우 에러
       */
      "406": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 회원의 미사용입금내역서비스를 해지한다
   */
  ServiceItemController_deleteUnidentifiedService: {
    parameters: {
      path: {
        /**
         * 회원의 순번
         */
        memberId: number;
      };
    };
    responses: {
      /**
       * 정상 : 상태 200 반환
       */
      "200": unknown;
      /**
       * memberId가 number가 아닐 때
       */
      "400": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 인증 오류
       */
      "401": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 회원을 찾을 수 없는 경우
       */
      "404": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 카페24 패키지 고객이 아닐경우 에러
       */
      "406": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 자동매치시 제외한 단어 조회
   */
  SettingController_getMatchExceptUser: {
    parameters: {
      path: {
        /**
         * 회원의 순번
         */
        memberId: number;
      };
    };
    responses: {
      /**
       * 성공 : 자동매치시 제외한 단어를 반환
       */
      "200": {
        "application/json": components["schemas"]["MatchExceptUser"][];
      };
      /**
       * 실패 : 회원 혹은 설정된 제외단어 내역을 찾을 수 없음
       */
      "404": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간)
       */
      "409": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 자동매치시 제외할 단어를 설정
   */
  SettingController_registerExceptUser: {
    parameters: {
      path: {
        /**
         * 회원의 순번
         */
        memberId: number;
      };
    };
    requestBody: {
      "application/json": components["schemas"]["RegisterExceptWordInput"];
    };
    responses: {
      /**
       * 성공 : 등록한 제외단어 정보 반환
       */
      "200": {
        "application/json": components["schemas"]["RegisterExceptUserResponse"];
      };
      /**
       * 실패 : 이미 등록된 단어가 있을 경우
       */
      "406": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간)
       */
      "409": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 자동매치시 매치제외 단어를 삭제
   */
  SettingController_deleteMatchExceptUser: {
    parameters: {
      path: {
        /**
         * 회원의 순번
         */
        memberId: number;
        /**
         * 매치제외 설정의 순번
         */
        exceptId: number;
      };
    };
    responses: {
      /**
       * 성공 : status 200 반환
       */
      "200": unknown;
      /**
       * 실패 : 회원 혹은 매치제외 단어 순번을 찾을 수 없음
       */
      "406": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간)
       */
      "409": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 설정변경된 로그 목록 최근 20개 검색
   */
  SettingController_getSettingLogs: {
    parameters: {
      path: {
        /**
         * 회원의 순번
         */
        memberId: number;
      };
    };
    responses: {
      /**
       * 성공 : 설정변경로그 목록을 반환
       */
      "200": {
        "application/json": components["schemas"]["SettingLog"][];
      };
      /**
       * 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간)
       */
      "409": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 은행별 필수 입력정보를 조회
   */
  ConfigInfoController_getAccount: {
    parameters: {
      path: {
        /**
         * 기업은행=03, 국민은행=04, 외환은행=05, 외환은행=06, 농협=13, 우리은행=20, 제일은행=23, 신한은행=26, 씨티은행=28, 대구은행=31, 부산은행=32, 광주은행=34, 제주은행=35, 전북은행=37, 경남은행=39, 새마을금고=45, 신협=48, 우체국=71, 하나은행=81, 수협=88, 산업은행=89, 케이뱅크=91,
         */
        accountCode:
          | "03"
          | "04"
          | "05"
          | "06"
          | "13"
          | "20"
          | "23"
          | "26"
          | "28"
          | "31"
          | "32"
          | "34"
          | "35"
          | "37"
          | "39"
          | "45"
          | "48"
          | "71"
          | "81"
          | "88"
          | "89"
          | "91";
      };
    };
    responses: {
      /**
       * 성공 : 조회된 은행별 필수 정보 반환
       */
      "200": {
        "application/json": components["schemas"]["AccountInputResponse"];
      };
      /**
       * 실패 : 정해진 은행코드 번호가 아닌 경우
       */
      "400": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 인증 오류
       */
      "401": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간)
       */
      "403": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 필수 정보를 찾을 수 없음
       */
      "404": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 카페24에서 패키지의 사용량 정보를 조회한다 (과금청구 목적, 1차 - 01:00, 2차 - 02:00)
   */
  PackageUsageController_search: {
    parameters: {
      query: {
        /**
         * 서비스코드 (bankdam)
         */
        service_code: string;
        /**
         * 쇼핑몰 아이디, 복수개 전송 가능 (콤마로 구분, 최대 100개)
         */
        user_id: string;
        /**
         * 서비스 사용 시작 일자 (yyyy-mm-dd 형식)
         */
        start_date: string;
        /**
         * 서비스 사용 종료 일자 (yyyy-mm-dd 형식)
         */
        end_date?: string;
      };
    };
    responses: {
      "200": {
        "application/json": components["schemas"]["PackageUsageResponse"];
      };
      /**
       * IP 인증에 실패한 경우
       */
      "401": unknown;
    };
  };
  /**
   * 미확인입금내역 서비스 설정을 조회한다
   */
  UnidentifiedInputController_getUnidentifiedInputConfig: {
    parameters: {
      path: {
        /**
         * 회원의 순번
         */
        memberId: number;
      };
    };
    responses: {
      /**
       * 성공 : 미확인입금내역 서비스 설정 내용을 반환
       */
      "200": {
        "application/json": components["schemas"]["UnidentifiedInputConfigResponse"];
      };
      /**
       * 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간)
       */
      "403": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 미확인입금내역 서비스 설정을 찾을 수 없음
       */
      "404": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 미확인입금내역 서비스 설정을 수정한다
   */
  UnidentifiedInputController_updateUnidentifiedInputConfig: {
    parameters: {
      path: {
        /**
         * 회원의 순번
         */
        memberId: number;
      };
    };
    requestBody: {
      "application/json": components["schemas"]["UpdateUnidentifiedInputConfigInput"];
    };
    responses: {
      /**
       * 성공 : 수정한 미확인입금내역 서비스 설정을 반환
       */
      "200": {
        "application/json": components["schemas"]["UnidentifiedInputConfigResponse"];
      };
      /**
       * 1. 실패 : 잘못된 수집시작일자, 수집종료일자를 입력함.
       * 2. 실패 : 게시요일과 게시일자를 모두 입력하지 않음
       * 3. 실패 : 미확인입금대상 이메일과 게시판 목록을 모두 입력하지 않음.
       * 4. 실패 : 올바른 게시시간 MMHH형식으로 4자리를 작성해야함.
       * 5. 실패 : 잘못된 게시항목을 입력함 (입금일자,적요,금액)
       * 6. 실패 : 잘못된 게시요일을 입력함 (월,화,수,목,금,토,일)
       */
      "400": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간)
       */
      "403": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 회원 혹은 미확인입금내역을 찾을 수 없음
       */
      "404": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 요청한 미확인입금대상 게시판목록이 일치하지 않음
       */
      "406": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 미확인입금내역 리포트 목록을 검색한다
   */
  UnidentifiedInputController_searchUnidentifiedInputReports: {
    parameters: {
      path: {
        /**
         * 회원의 순번
         */
        memberId: number;
      };
      query: {
        /**
         * 페이징 페이지 정보
         */
        page: number;
        /**
         * 페이징 페이지당 목록 수
         */
        limit: number;
        /**
         * 페이징 링크 경로
         */
        route?: string;
      };
    };
    responses: {
      /**
       * 성공 : 미확인입금내역 리포트 목록을 반환
       */
      "200": {
        "application/json": components["schemas"]["SearchUnidentifiedInputReportsResponse"];
      };
      /**
       * 실패 : 잘못된 형식의 검색옵션
       */
      "400": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간)
       */
      "403": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
  /**
   * 미확인입금내역 리포트를 조회한다
   */
  UnidentifiedInputController_getUnidentifiedInputReport: {
    parameters: {
      path: {
        /**
         * 회원의 순번
         */
        memberId: number;
        /**
         * 리포트 일자 8자리의 YYYYMMDD(연월일)
         */
        reportId: number;
      };
    };
    responses: {
      /**
       * 성공 : 미확인입금내역 리포트를 반환
       */
      "200": {
        "application/json": components["schemas"]["UnidentifiedInputReport"];
      };
      /**
       * 실패 : 잘못된 형식의 리포트 일자를 입력함
       */
      "400": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간)
       */
      "403": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
      /**
       * 실패 : 미확인입금내역 리포트를 찾을 수 없음
       */
      "404": {
        "application/json": components["schemas"]["ExceptionResponse"];
      };
    };
  };
}

export interface components {
  schemas: {
    FilterAuthRedirect: {
      /**
       * state
       */
      state: string;
      /**
       * code
       */
      code: string;
    };
    OldUserInfo: {
      /**
       * 이용자 이름
       */
      mname?: string;
      /**
       * 전화번호
       */
      mtel_srt?: string;
      /**
       * Email
       */
      memail?: string;
      /**
       * 기본형 만료일
       */
      endday?: string;
      /**
       * 퀵형 만료일
       */
      quick_endday?: string;
      /**
       * 기본형 계좌수
       */
      accea?: string;
      /**
       * 퀵형 계좌수
       */
      qaccea?: string;
      /**
       * 회원테이블 등록여부
       */
      exist?: string;
      /**
       * 기본형 등록 계좌수
       */
      regaccea?: string;
      /**
       * 퀵형 등록 계좌수
       */
      qregaccea?: string;
    };
    NewUserInfo: {
      /**
       * 이용자 ID
       */
      mallId: string;
      /**
       * 이용자유형
       */
      memberRole: "P" | "A";
      /**
       * 서비스유형
       */
      memberType: "cafe24" | "cafe24pkg";
    };
    ServiceChangeInfo: {
      /**
       * 현재 서비스
       */
      from: "cafe24" | "cafe24pkg";
      /**
       * 변경할 서비스
       */
      to: "cafe24" | "cafe24pkg";
      /**
       * 변경단계 (1:잔여기간 및 환불안내, 2:서비스변경 confirm)
       */
      step: 1 | 2;
    };
    LoginResponse: {
      /**
       * 억세스토큰
       */
      accessToken?: string;
      /**
       * 리프레시토큰
       */
      refreshToken?: string;
      /**
       * 최초 전달된 stateId값 - 신규가입 및 전환가입시 함께 전달해 주어야 함
       */
      state?: string;
      /**
       * 예외코드
       */
      exceptionCode?: 110 | 120 | 130 | 140;
      /**
       * 예외메시지
       */
      exceptionMessage?:
        | "서비스 만료 (억세스토큰 있음)"
        | "서비스 변경 (뱅크다M, 뱅크다M패키지 전환)"
        | "신규가입 (억세스토큰 없음)"
        | "구서비스 전환가입 (억세스토큰 없음)";
      oldUserInfo?: components["schemas"]["OldUserInfo"] & {
        [key: string]: any;
      };
      newUserInfo?: components["schemas"]["NewUserInfo"] & {
        [key: string]: any;
      };
      serviceChangeInfo?: components["schemas"]["ServiceChangeInfo"] & {
        [key: string]: any;
      };
    };
    ExceptionResponse: {
      /**
       * HTTP Status Code
       */
      statusCode: number;
      /**
       * 결과 메시지
       */
      message: string;
      /**
       * 에러 내용
       */
      error: string;
    };
    RefreshLoginRequest: {
      /**
       * 억세스토큰
       */
      accessToken: string;
      /**
       * 리프레시토큰
       */
      refreshToken: string;
    };
    Bank: {
      /**
       * 거래내역키
       */
      id: number;
      /**
       * 은행명
       */
      name: string;
      /**
       * 거래일자(YYYYMMDD)
       */
      date: number;
      /**
       * 거래시간(HHMMSS)
       */
      time: string;
      /**
       * 필터링적요
       */
      jukyo: string;
      /**
       * 내용
       */
      description?: string;
      /**
       * 비고
       */
      etc?: string;
      /**
       * 입금액
       */
      input: number;
      /**
       * 출금액
       */
      output?: number;
      /**
       * 잔액
       */
      balance?: number;
      /**
       * 수집일시
       */
      collectedAt?: string;
      /**
       * 메모란
       */
      memo?: string;
      /**
       * 매치대상제외(T:매치제외,F:매치포함)
       */
      exceptedMatch?: string;
      /**
       * match 번호
       */
      matchId?: number;
      /**
       * 계좌번호
       */
      accountNo: string;
      /**
       * 계좌 순번
       */
      accountId?: number;
      /**
       * 매치상태
       */
      matchFlag?: string;
      /**
       * 자동,수동여부
       */
      matchClass?: string;
      /**
       * 매치형태(입금내역:주문내역)
       */
      matchVs?: string;
    };
    PagingMeta: {
      /**
       * 현재페이지 목록수
       */
      itemCount: number;
      /**
       * 전체목록수
       */
      totalItems: number;
      /**
       * 페이지당 목록수
       */
      itemsPerPage: number;
      /**
       * 전체페이지 수
       */
      totalPages: number;
      /**
       * 현재페이지 번호
       */
      currentPage: number;
    };
    PagingLinks: {
      /**
       * 처음 페이지 링크
       */
      first?: string;
      /**
       * 이전 페이지 링크
       */
      previous?: string;
      /**
       * 다음 페이지 링크
       */
      next?: string;
      /**
       * 마지막 페이지 링크
       */
      last?: string;
    };
    BankPaging: {
      /**
       * 페이지목록
       */
      items: components["schemas"]["Bank"][];
      meta: components["schemas"]["PagingMeta"] & { [key: string]: any };
      links: components["schemas"]["PagingLinks"] & { [key: string]: any };
    };
    BankBalanceView: {
      /**
       * 계좌의 순번
       */
      accountId: number;
      /**
       * 이름
       */
      bankName: string;
      /**
       * 잔액
       */
      balance: number;
      /**
       * 계좌의 별칭
       */
      rename: string;
    };
    SearchBankSummariesResponse: {
      /**
       * 계좌의 순번
       */
      accountId: number;
      /**
       * 계좌의 총 입금액
       */
      totalInput?: number;
      /**
       * 계좌의 총 출금액
       */
      totalOutput?: number;
      /**
       * 계좌의 별칭
       */
      rename?: string;
      /**
       * 은행명
       */
      bankName: string;
    };
    UpdateBankInput: {
      /**
       * (해당입출금 내역건 간단)메모
       */
      memo: string;
    };
    SaveBankMemoResponse: {
      /**
       * (업데이트한) 거래내역의 순번
       */
      id: number;
      /**
       * (업데이트한) 거래내역의 메모내용
       */
      memo: string;
    };
    UpdateBankMatchInputIds: {
      /**
       * 해당계좌의 순번
       */
      accountId: number;
      /**
       * 거래내역의 순번
       */
      bankId: number;
    };
    UpdateBankMatchInput: {
      /**
       * 계좌 및 거래내역의 순번목록
       */
      ids: components["schemas"]["UpdateBankMatchInputIds"][];
      /**
       * 매치대상제외(T:매치제외,F:매치포함)
       */
      exceptedMatch: "F" | "T";
    };
    SaveBanksExceptedMatchResponse: {
      /**
       * 계좌 및 거래내역의 순번목록
       */
      ids: components["schemas"]["UpdateBankMatchInputIds"][];
      /**
       * 매치대상제외(T:매치제외,F:매치포함)
       */
      exceptedMatch: "F" | "T";
    };
    AccountListResponse: {
      /**
       * (생성된) 계좌의 순번
       */
      accountId: number;
      /**
       * (생성된) 계좌번호
       */
      accountNo: string;
      /**
       * (생성된) 은행코드
       */
      bkcode: string;
      /**
       * (생성된) 은행명
       */
      bankName: string;
      /**
       * 계좌상태정보
       */
      tag: string;
      /**
       * (생성된) 계좌의 별칭
       */
      rename?: string;
      /**
       * 계좌종류
       */
      type: string;
      /**
       * 최종조회일시
       */
      lastScrapingAt: string;
      /**
       * 퀵계좌 여부
       */
      usingQuick: string;
      /**
       * 스크래핑 가능 시간
       */
      availableScrapingAt?: string;
      /**
       * 최종조회결과
       */
      scrapingDescription: string;
      /**
       * 계좌표시색상
       */
      color: string;
      /**
       * 계좌정렬순서
       */
      sort: number;
    };
    AccountResponse: {
      /**
       * (생성된) 계좌의 순번
       */
      accountId: number;
      /**
       * (생성된) 계좌번호
       */
      accountNo: string;
      /**
       * (생성된) 계좌유형(P:개인,C:법인)
       */
      type: "P" | "C";
      /**
       * (생성된) 은행코드
       */
      bkcode: string;
      /**
       * (생성된) 은행명
       */
      bankName: string;
      /**
       * (생성된) 생년월일(개인) 혹은 사업자번호(법인)
       */
      residentId: string;
      /**
       * (생성된) 계좌의 별칭
       */
      rename?: string;
      /**
       * (생성된) 계좌의 조회용 아이디
       */
      webId?: string;
    };
    RegisterAccountInput: {
      /**
       * 계좌종류 (P: 개인, C: 법인), (씨티은행의 경우 'P:개인' 불가능)
       */
      type: "P" | "C";
      /**
       * 계좌번호
       */
      accountNo: string;
      /**
       * 은행코드번호 (외환은행의 경우, 계좌생성 불가능)
       */
      bkcode:
        | "03"
        | "04"
        | "05"
        | "06"
        | "13"
        | "20"
        | "23"
        | "26"
        | "28"
        | "31"
        | "32"
        | "34"
        | "35"
        | "37"
        | "39"
        | "45"
        | "48"
        | "71"
        | "81"
        | "88"
        | "89"
        | "91";
      /**
       * 계좌비밀번호
       */
      accountPassword: string;
      /**
       * 사업자번호 혹은 생년월일
       */
      regidentId: string;
      /**
       * 계좌별명
       */
      rename?: string;
      /**
       * 인터넷뱅킹 or 조회용 아이디
       */
      webId?: string;
      /**
       * 인터넷뱅킹 or 조회용 패스워드
       */
      webPassword?: string;
    };
    UpdateAccountInput: {
      /**
       * 변경할 16진수 색상 (ex. #ff4343 중 #을 제외한 'ff4343'으로 입력)
       */
      color?: string;
      /**
       * 은행코드번호 (외환은행의 경우, 계좌생성 불가능)
       */
      bkcode?:
        | "03"
        | "04"
        | "05"
        | "06"
        | "13"
        | "20"
        | "23"
        | "26"
        | "28"
        | "31"
        | "32"
        | "34"
        | "35"
        | "37"
        | "39"
        | "45"
        | "48"
        | "71"
        | "81"
        | "88"
        | "89"
        | "91";
      /**
       * 계좌비밀번호
       */
      accountPassword?: string;
      /**
       * 계좌종류 (P: 개인, C: 법인)
       */
      type?: "P" | "C";
      /**
       * 사업자번호 혹은 생년월일
       */
      regidentId?: string;
      /**
       * 계좌별명
       */
      rename?: string;
      /**
       * 인터넷뱅킹 or 조회용 아이디
       */
      webId?: string;
      /**
       * 인터넷뱅킹 or 조회용 패스워드
       */
      webPassword?: string;
    };
    UpdateAccountResponse: {
      /**
       * (업데이트된) 계좌의 순번
       */
      id: number;
      /**
       * (업데이트된) 계좌의 은행코드
       */
      bkcode: string;
      /**
       * (업데이트된) 계좌의 은행명
       */
      bankName: string;
      /**
       * (개인의 경우) 생년월일 또는 (기업의 경우) 사업자번호
       */
      residentId: string;
      /**
       * (업데이트된) 계좌번호
       */
      accountNo: string;
      /**
       * (업데이트된) 계좌유형 (P:개인,C:법인)
       */
      type: "P" | "C";
      /**
       * (업데이트된) 계좌의 색상
       */
      color: string;
      /**
       * (업데이트된) 계좌의 인터넷뱅킹 or 조회용 아이디
       */
      webId?: string;
      /**
       * (업데이트된) 계좌의 별칭
       */
      rename?: string;
    };
    AccountIdSort: {
      /**
       * (정렬 순서를 변경할) 계좌의 순번
       */
      id: number;
      /**
       * (정렬 순서를 변경할) 계좌의 정렬순번
       */
      sort: number;
    };
    UpdateAccountsInput: {
      /**
       * (정렬순서를 변경할) 계좌의 순번과 정렬순번 목록
       */
      accounts: components["schemas"]["AccountIdSort"][];
    };
    UpdateAccountsResponse: {
      /**
       * (정렬순서가 변경된) 계좌의 순번과 정렬순번 목록
       */
      accountId: number;
      /**
       * (정렬순서가 변경된) 계좌번호
       */
      accountNo: string;
      /**
       * (정렬순서가 변경된) 계좌의 순번과 정렬순번 목록
       */
      accountSort: number;
    };
    GetOrderMatchSummaryResponse: {
      /**
       * 미확인 건수
       */
      unidentifiedMatchCnt: number | null;
      /**
       * 자동확인 건수
       */
      autoMatchCnt: number | null;
      /**
       * 수동확인 건수
       */
      manualMatchCnt: number | null;
      /**
       * 유사매치 건수
       */
      similarMatchCnt: number | null;
      /**
       * 매치제외 건수
       */
      exceptedMatchCnt: number | null;
      /**
       * 미확인 금액
       */
      unidentifiedMatchInput: number | null;
      /**
       * 자동확인 금액
       */
      autoMatchInput: number | null;
      /**
       * 수동확인 금액
       */
      manualMatchInput: number | null;
      /**
       * 유사매치 금액
       */
      similarMatchInput: number | null;
      /**
       * 매치제외 금액
       */
      exceptedMatchInput: number | null;
    };
    GetOrderMatchResponseBank: {
      /**
       * 거래내역 순번
       */
      id: number;
      /**
       * 은행명
       */
      name: number;
      /**
       * 거래일자(YYYYMMDD)
       */
      date: string;
      /**
       * 거래시간(HHMMSS)
       */
      time: string;
      /**
       * 적요
       */
      jukyo: string;
      /**
       * 입금액
       */
      input: number;
      /**
       * 메모
       */
      memo: string;
      /**
       * 매치대상제외여부 (F:매치포함,T:매치제외)
       */
      exceptedMatch: "T" | "F";
      /**
       * 매치순번
       */
      matchId: number;
      /**
       * 계좌번호
       */
      accountNo: string;
      /**
       * 계좌순번
       */
      accountId: number;
      /**
       * 매치상태
       */
      matchFlag: string;
      /**
       * 자동,수동여부
       */
      matchClass: string;
      /**
       * 매치형태(입금내역:주문내역)
       */
      matchVs: string;
    };
    OrderDetail: {
      /**
       * 입금자명
       */
      billngName: string;
      /**
       * 입금자은행명
       */
      bankCodeName: string;
      /**
       * 입금계좌번호
       */
      bankAccountNo: string;
      /**
       * 주문일자
       */
      orderedAt: string;
      /**
       * 결제일자
       */
      paymentedAt?: string | null;
      /**
       * 결제금액
       */
      payment: number;
      /**
       * 상품명
       */
      productNames: string;
      /**
       * 구매자이름
       */
      buyerName?: string;
    };
    Order: {
      /**
       * 주문키
       */
      id: number;
      /**
       * 주문번호
       */
      orderNo: string;
      /**
       * 샵번호
       */
      shopNo: number;
      /**
       * 매치번호
       */
      matchId: number;
      detail?: components["schemas"]["OrderDetail"];
    };
    GetOrderMatchResponse: {
      /**
       * (매칭된) 입금목록
       */
      banks: components["schemas"]["GetOrderMatchResponseBank"][];
      /**
       * (매칭된) 주문목록
       */
      orders: components["schemas"]["Order"][];
    };
    RegisterOrderMatchInputItem: {
      /**
       * 매치순번
       */
      matchId: number;
      /**
       * 거래내역 순번 (거래내역순번과 주문순번 중 택 1개만 필수입력)
       */
      bankId?: number | null;
      /**
       * 주문 순번 (거래내역순번과 주문순번 중 택 1개만 필수입력)
       */
      orderId?: number | null;
    };
    RegisterOrderMatchInput: {
      /**
       * 입금확인 등록 입력 목록값
       */
      items: components["schemas"]["RegisterOrderMatchInputItem"][];
    };
    MatchManual: {
      /**
       * 수동매치 순번
       */
      id: number;
      /**
       * 수동 match 상태
       */
      status: "접수" | "성공" | "실패";
      /**
       * 수동매치유형
       */
      type: "both" | "order";
      /**
       * 입금확인JSON TEXT
       */
      matchText: string;
      /**
       * 결과
       */
      description?: string;
      /**
       * 생성일시
       */
      createdAt: string;
    };
    userJoinRequest: {
      /**
       * 이용자 ID
       */
      mallId: string;
      /**
       * 이용자 이름
       */
      mname: string;
      /**
       * 전화번호
       */
      mtel: string;
      /**
       * Email
       */
      memail: string;
      /**
       * state값
       */
      state: string;
      /**
       * 가입유형(신규, 전환)
       */
      joinType: string;
    };
    userJoinResponse: {
      /**
       * state
       */
      state: string;
    };
    ConflictException: { [key: string]: any };
    chageMemberType: {
      /**
       * from
       */
      from: "cafe24" | "cafe24pkg";
      /**
       * to
       */
      to: "cafe24" | "cafe24pkg";
    };
    chageMemberTypeRespone: {
      /**
       * message
       */
      status: string;
      /**
       * message
       */
      message: string;
    };
    UpdateMemberInput: {
      /**
       * [기타설정 업데이트시 필수값] 자동입금확인 대상기간 (일(day)단위 입력)
       */
      autoMatchDay?: number;
      /**
       * [기타설정 업데이트시 필수값] 출금 표기여부 (y:표기, n:미표기)
       */
      displayWithdraw?: "y" | "n";
      /**
       * [기타설정 업데이트시 필수값] 잔액 표기여부 (y:표기, n:미표기)
       */
      displayBalance?: "y" | "n";
      /**
       * [정보관리 업데이트시 필수값] 이용자명
       */
      name?: string;
      /**
       * [정보관리 업데이트시 필수값] 이용자명
       */
      tel?: string;
      /**
       * [정보관리 업데이트시 필수값] 이용자명
       */
      email?: string;
      /**
       * [정보관리 업데이트시 필수값] SMS수신여부 (0:수신안함, 1:수신)
       */
      receiveSms?: 0 | 1;
      /**
       * [정보관리 업데이트시 필수값] email수신여부 (0:수신안함, 1:수신)
       */
      receiveEmail?: 0 | 1;
    };
    Qna: {
      /**
       * 문의사항 순번
       */
      id: number;
      /**
       * 문의 작성일자
       */
      questionAt: string;
      /**
       * 문의 작성자 몰아이디
       */
      userMallId: string;
      /**
       * 문의 작성자 이메일
       */
      userEmail: string;
      /**
       * 문의 제목
       */
      questionTitle: string;
      /**
       * 서비스 유형
       */
      serviceType: "뱅크다MCafe24" | "뱅크다K" | "뱅크다MBiz";
      /**
       * 문의 내용
       */
      questionContent?: string | null;
      /**
       * 문의 답변일자
       */
      replyAt?: string | null;
      /**
       * 문의 답변자 아이디
       */
      replyAdminId?: string | null;
      /**
       * 문의 답변제목
       */
      replyTitle?: string | null;
      /**
       * 문의 답변내용
       */
      replyContent?: string | null;
      /**
       * 조회수
       */
      count: number;
    };
    GetNotices: {
      items: components["schemas"]["Qna"][];
      meta: components["schemas"]["PagingMeta"] & { [key: string]: any };
      links: components["schemas"]["PagingLinks"] & { [key: string]: any };
    };
    Notice: {
      /**
       * 공지사항 순번
       */
      id: number;
      /**
       * 공지사항 제목
       */
      title: string;
      /**
       * 공지사항 내용
       */
      content: string;
      /**
       * 공지사항 조회수
       */
      count: number;
      /**
       * 공개범위
       */
      partner: "전체" | "뱅크다" | "카페24";
      /**
       * 공지사항 생성일
       */
      createdAt: string;
    };
    OrderPaging: {
      /**
       * 페이지목록
       */
      items: components["schemas"]["Order"][];
      meta: components["schemas"]["PagingMeta"] & { [key: string]: any };
      links: components["schemas"]["PagingLinks"] & { [key: string]: any };
    };
    RequestGetOrderInput: {
      /**
       * 검색시작날짜(YYYYMMDD)
       */
      startDate: number;
      /**
       * 검색종료날짜(YYYYMMDD)
       */
      endDate: number;
      /**
       * 주문상태(N00:입금전, N10:상품준비중, N20:배송준비중, N21:배송대기, N30: 배송중, N40:배송완료)
       */
      orderStatus: "N00" | "N10" | "N20" | "N21" | "N30" | "N40";
    };
    JobIdResponse: {
      /**
       * 작업번호
       */
      jobId: number;
    };
    ConfirmRequestResponse: {
      /**
       * 작업번호
       */
      result: "success" | "fail" | "ready" | "running" | "cancel";
    };
    UpdateShopOrdersInputList: {
      /**
       * 주문번호
       */
      orderNo: string;
      /**
       * 샵 번호
       */
      shopNo: number;
    };
    UpdateShopOrdersInput: {
      /**
       * 주문 및 샵번호 목록
       */
      list: components["schemas"]["UpdateShopOrdersInputList"][];
      /**
       * 수동매치 유형(order:주문내역만, both: 입금+주문내역 )
       */
      type: "order" | "both";
    };
    GetQnas: {
      items: components["schemas"]["Qna"][];
      meta: components["schemas"]["PagingMeta"] & { [key: string]: any };
      links: components["schemas"]["PagingLinks"] & { [key: string]: any };
    };
    RegisterQnaInput: {
      /**
       * 질문 제목
       */
      questionTitle: string;
      /**
       * 질문 작성자의 이메일
       */
      userEmail?: string | null;
      /**
       * 질문 작성 내용
       */
      questionContent: string;
    };
    BankServiceInfo: {
      /**
       * 서비스 이름 : 뱅크다, 뱅크다퀵, 패키지
       */
      serviceName: string;
      /**
       * 서비스 이름 : 뱅크다, 뱅크다퀵, 패키지
       */
      usedAccountCount: string;
      /**
       * 종료일
       */
      finishDate: string;
      /**
       * 이용가능한 계좌수
       */
      availableCount: string;
      /**
       * 이용중 계좌수
       */
      usedCount: string;
      /**
       * 서비스 주기
       */
      cycle: string;
    };
    UnidentifiedServiceInfo: {
      /**
       * 서비스 이름
       */
      serviceName: string;
      /**
       * 서비스주기
       */
      cycle: string;
      /**
       * 종료일
       */
      finishDate: string;
    };
    MatchingShopInfo: {
      /**
       * shop 넘버
       */
      shopNo: number;
      /**
       * shop 이름
       */
      shopName: string;
      /**
       * 기본샵 여부
       */
      isDefault: boolean;
      /**
       * 사용 여부
       */
      isUse: boolean;
      /**
       * 선택 변경가능 여부
       */
      isUpdate: boolean;
    };
    MultiMallMatchingServiceInfo: {
      /**
       * 서비스 이름
       */
      serviceName: string;
      /**
       * 서비스주기
       */
      cycle: string;
      /**
       * 종료일
       */
      finishDate: string;
      /**
       * 멀티몰매칭Shop정보
       */
      shops: components["schemas"]["MatchingShopInfo"][];
    };
    ServiceListResponse: {
      bankServiceInfo: components["schemas"]["BankServiceInfo"] & {
        [key: string]: any;
      };
      unidentifiedService?: components["schemas"]["UnidentifiedServiceInfo"] & {
        [key: string]: any;
      };
      multiMallMatchingService?: components["schemas"]["MultiMallMatchingServiceInfo"] & {
        [key: string]: any;
      };
    };
    RegisterServiceInput: {
      /**
       * 패키지 서비스 옵션
       */
      serviceType: "multimall" | "unidentified";
      /**
       * 멀티몰 번호, 서비스가 멀티몰일 경우 사용
       */
      shopNo?: number;
    };
    MatchExceptUser: {
      /**
       * 매치제외단어 키
       */
      id: number;
      /**
       * 제외 단어
       */
      word: string;
    };
    RegisterExceptWordInput: {
      /**
       * 자동매치시 제외할 단어
       */
      word: string;
    };
    RegisterExceptUserResponse: {
      /**
       * (insert) 매치제외 키
       */
      id: number;
      /**
       * (insert) 제외단어
       */
      word: string;
    };
    SettingLog: {
      /**
       * 변경로그
       */
      contents: string;
      /**
       * 변경일시
       */
      createdAt: string;
    };
    InputOptionType: {
      /**
       * 입력란 속성값 name
       */
      property: string;
      /**
       * 입력란 label 문구
       */
      name: string;
      /**
       * 입력란 type
       */
      inputType: string;
      /**
       * 입력란 도움말
       */
      helpDescription?: string;
      /**
       * 입력란 최소길이
       */
      minLength: number;
      /**
       * 입력란 최대길이
       */
      maxLength: number;
      /**
       * 입력란 필수 여부
       */
      require: boolean;
    };
    InputDetailByBussinse: {
      /**
       * 기업뱅킹 은행별 표시 문구
       */
      name: string;
      /**
       * 기업뱅킹 타입
       */
      type: string;
      /**
       * 기업뱅킹 은행별 입력값 리스트
       */
      inputs: components["schemas"]["InputOptionType"][];
    };
    InputDetailByPersonal: {
      /**
       * 개인뱅킹 은행별 표시 문구문구
       */
      name: string;
      /**
       * 개인뱅킹 타입
       */
      type: string;
      /**
       * 개인뱅킹 은행별 입력값 리스트
       */
      inputs?: components["schemas"]["InputOptionType"][];
    };
    PrepareDocs: {
      /**
       * 상단 타이틀 문구
       */
      title: string;
      /**
       * 상단 안내 문구
       */
      topText: string[];
      /**
       * 안내 버튼 명
       */
      buttonText: string;
      /**
       * 하단 안내 문구
       */
      bottomText: string[];
      /**
       * 체크 박스 문구
       */
      checkboxText: string;
    };
    AccountInputResponse: {
      /**
       * 은행Code
       */
      bankCode: string;
      /**
       * 은행이름
       */
      bankName: string;
      /**
       * 은행별 조회기능 이름
       */
      quickSearchName: string;
      bussinse?: components["schemas"]["InputDetailByBussinse"] & {
        [key: string]: any;
      };
      personal?: components["schemas"]["InputDetailByPersonal"] & {
        [key: string]: any;
      };
      prepareDoc: components["schemas"]["PrepareDocs"] & { [key: string]: any };
    };
    PackageUsageData: {
      /**
       * 쇼핑몰 아이디
       */
      user_id: string;
      /**
       * 사용유무
       */
      usage_status: "Y" | "N";
      /**
       * 기본요금
       */
      basic_price: number;
      /**
       * 추가/할인 내역 (기본 요금을 포함하지 않음)
       */
      brief_desc: string;
      /**
       * 추가/할인 요금 (기본 요금을 포함하지 않음)
       */
      extra_price: number;
    };
    PackageUsageResponse: {
      /**
       * 응답코드 (정상: success/ 실패: fail)
       */
      code: "success" | "fail";
      /**
       * 실패시 에러 메시지
       */
      message: string;
      /**
       * 서비스 코드 (카페24에서 별도 제공)
       */
      service_code: string;
      /**
       * 데이터
       */
      data: components["schemas"]["PackageUsageData"][];
    };
    UnidentifiedInputConfig: {
      /**
       * 회원의 순번
       */
      memberId: number;
      /**
       * 수집 시작일
       */
      collectStartDay: number;
      /**
       * 수집 종료일
       */
      collectEndDay: number;
      /**
       * 게시 요일 목록
       */
      reportWeekItems?: string[] | null;
      /**
       * 게시 일자 목록
       */
      reportDays?: number[] | null;
      /**
       * 게시 시간
       */
      reportTime: string;
      /**
       * 게시 항목(입금일자,금액,적요) 목록
       */
      reportItems: string[];
      /**
       * 문구 제목
       */
      reportTitle: string;
      /**
       * 문구 머릿말
       */
      reportHeader: string;
      /**
       * 문구 꼬릿말
       */
      reportFooter: string;
    };
    UnidentifiedInputConfigTargetEmail: {
      /**
       * 회원의 순번
       */
      memberId: number;
      /**
       * 회원의 이메일
       */
      email: string;
    };
    UnidentifiedInputConfigTargetBoard: {
      /**
       * 회원의 순번
       */
      memberId: number;
      /**
       * 멀티쇼핑몰 순번
       */
      shopNo: number;
      /**
       * 게시판 순번
       */
      boardId: number;
      /**
       * 게시판 분류
       */
      boardType: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 11;
      /**
       * 게시판 이름
       */
      boardName: string;
      /**
       * 게시판 연동여부
       */
      reportFlag: boolean;
    };
    UnidentifiedInputConfigResponse: {
      unidentifiedInputConfig: components["schemas"]["UnidentifiedInputConfig"] & {
        [key: string]: any;
      };
      /**
       * 미확인입금대상 이메일 설정 목록
       */
      unidentifiedInputTargetEmails?: components["schemas"]["UnidentifiedInputConfigTargetEmail"][];
      /**
       * 미확인입금대상 게시판 설정 목록
       */
      unidentifiedInputTargetBoards?: components["schemas"]["UnidentifiedInputConfigTargetBoard"][];
    };
    SearchUnidentifiedInputReportsResponse: {
      /**
       * 페이지목록
       */
      items: string[];
      meta: components["schemas"]["PagingMeta"] & { [key: string]: any };
      links: components["schemas"]["PagingLinks"] & { [key: string]: any };
    };
    UnidentifiedInputReport: {
      /**
       * 회원의 순번
       */
      memberId: number;
      /**
       * 입금미확인내역 리포트 생성일자 (YYYY-MM-DD)
       */
      reportedAt: string;
      /**
       * S3경로
       */
      reportedPath: string;
      /**
       * 생성 일자
       */
      createdAt: string;
      /**
       * 업데이트 일자
       */
      updatedAt: string;
    };
    UpdateUnidentifiedInputConfigInputBoard: {
      /**
       * 멀티쇼핑몰 순번
       */
      shopNo: number;
      /**
       * 게시판 순번
       */
      boardId: number;
    };
    UpdateUnidentifiedInputConfigInput: {
      /**
       * 수집시작 일자 (수집종료일자보다 이하의 값을 입력)
       */
      collectStartDay: number;
      /**
       * 수집종료 일자
       */
      collectEndDay: number;
      /**
       * 게시요일
       */
      reportWeekItems?: string[] | null;
      /**
       * 게시일자
       */
      reportDays?: number[] | null;
      /**
       * 게시시간 (HHMM: 시간/분)
       */
      reportTime: string;
      /**
       * 미확인입금대상 게시판 설정의 입력목록
       */
      boards?:
        | components["schemas"]["UpdateUnidentifiedInputConfigInputBoard"][]
        | null;
      /**
       * 게시항목
       */
      reportItems: string[];
      /**
       * 미확인입금 이메일 목록 설정
       */
      emails?: string[] | null;
      /**
       * 문구설정 제목
       */
      reportTitle: string;
      /**
       * 문구설정 머릿말
       */
      reportHeader: string;
      /**
       * 문구설정 꼬릿말
       */
      reportFooter: string;
    };
  };
}
